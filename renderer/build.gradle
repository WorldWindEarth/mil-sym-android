description = 'MIL-STD-2525C Symbology Renderer'

apply plugin: 'com.android.library'
apply from: "${rootDir}/gradle/android-support.gradle"


task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    options {
        if (JavaVersion.current().isJava8Compatible()) { // disable lint for java8
            addStringOption('Xdoclint:none', '-quiet')
        }
        encoding    = "UTF-8"
        docEncoding = "UTF-8"
        charSet     = "UTF-8"
        linkSource  = true

        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO

        title  = "MIL-STD-2525 Android Symbology Renderer (${project.version})"
    }
}


task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
}
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}


project.afterEvaluate {
    publishing.publications {
        maven(MavenPublication) {
            pom.packaging = "aar"

            artifact("${buildDir}/outputs/aar/${project.name}-release.aar")
            artifact("${buildDir}/intermediates/bundles/release/classes.jar")

            artifact sourceJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            updatePom(pom, project)
        }
    }
}
String generatedResDir = 'build/generated-res/'

//Ensure that the generated resource directory is created
file('build/generated-res/raw').mkdirs()
android.sourceSets.main.res.srcDirs += generatedResDir

import armyc2.c2sd.xml.parser.BinaryGeneratorHelper

task writeBinaryResources{
    BinaryGeneratorHelper.generate(file('xmlResources'), file(generatedResDir + 'raw'))
}

afterEvaluate{
    // Write the binary resources only if we are building an APK
    tasks['preBuild'].dependsOn writeBinaryResources
}



ext {
    PUBLISH_GROUP_ID = 'io.github.missioncommand'
    PUBLISH_VERSION = '0.1.48'
    PUBLISH_ARTIFACT_ID = 'mil-sym-android-renderer'
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"


